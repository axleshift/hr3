import{i as E,r as j,j as e,L as W}from"./index-BregGavu.js";import{a as T}from"./axios-DXsv3KKR.js";import{e as _}from"./employee-BtHkxQvA.js";import{C as b,a as o}from"./CRow-DCQtSTwn.js";import{C as F,a as w}from"./CCardBody--BWERNhg.js";import{C as B}from"./CCardHeader-BeNLNKIv.js";import{C as H}from"./CForm-CaJJHpdi.js";import{C as n}from"./CFormInput-CLp7rr_o.js";import{C as f}from"./CFormSelect-CU7ZVpMm.js";import{C as R}from"./CInputGroup-B1ALbDtP.js";import{C as $}from"./CInputGroupText-sUutiNQR.js";import{a as g}from"./index-2GwXPYeC.js";const v=y=>{const[a,t]=y.split(" "),[m,d]=a.split(":").map(u=>parseInt(u));let r=m;t==="PM"&&r!==12?r+=12:t==="AM"&&r===12&&(r=0);const i=r.toString().padStart(2,"0"),x=d.toString().padStart(2,"0");return`${i}:${x}`},D=y=>{let a=0;return y.forEach(t=>{if(t.status==="Present"&&t.time_tracking&&t.time_tracking.clock_in&&t.time_tracking.clock_out){const{clock_in:m,clock_out:d}=t.time_tracking;try{const r=v(m),i=v(d),x=new Date(`1970-01-01T${r}:00`),u=new Date(`1970-01-01T${i}:00`);if(isNaN(x.getTime())||isNaN(u.getTime())){console.warn(`Invalid time data for ${t.date}: ${m} to ${d}`);return}const N=(u-x)/(1e3*60*60);a+=N}catch(r){console.error(`Error calculating hours for ${t.date}:`,r)}}}),a},Y=()=>{const y=E(),[a,t]=j.useState({employeeId:"",employeeName:"",basicSalary:"",overtime:"",bonus:"",deductions:"",hoursWorked:"",benefits:"",accountNumber:"",hourlyRate:""}),[m,d]=j.useState(0),[r,i]=j.useState(""),[x,u]=j.useState([]),N=l=>{const h=l.target.value;t({...a,employeeId:h});const s=_.find(p=>p.employee_id===parseInt(h));s?(t(p=>({...p,employeeName:s.name,hoursWorked:D(s.attendance),accountNumber:s.accountNumber})),u(s.attendance),i(s.paymentMethod)):(t(p=>({...p,employeeName:"",hoursWorked:"",accountNumber:""})),i(""))};j.useEffect(()=>{(()=>{const h=parseFloat(a.basicSalary)||0,s=parseFloat(a.overtime)||0,p=parseFloat(a.benefits)||0,I=parseFloat(a.bonus)||0,P=parseFloat(a.deductions)||0,M=h+s+I-(P+p);d(M)})()},[a]);const c=l=>{l.persist(),t({...a,[l.target.name]:l.target.value})},C=()=>{t({employeeId:"",employeeName:"",basicSalary:"",overtime:"",bonus:"",deductions:"",hoursWorked:"",benefits:"",accountNumber:""}),d(0),i(""),u([])},S=l=>{i(l.target.value)},k=async l=>{l.preventDefault();const h={employeeId:a.employeeId,employeeName:a.employeeName,basicSalary:Math.round(a.basicSalary),overtime:Math.round(a.overtime)||0,benefits:Math.round(a.benefits)||0,bonus:Math.round(a.bonus)||0,deductions:Math.round(a.deductions)||0,netSalary:Math.round(m),hoursWorked:a.hoursWorked,paymentMethod:r,accountNumber:a.accountNumber||null,hourlyRate:a.hourlyRate};try{const s=await T.post("http://localhost:8000/api/addpayroll",h);if(console.log(s.data),s.data.status===200)return y("/payroll");s.data.status===422&&t({...a,error_list:s.data.validate_err})}catch(s){console.error("Error in POST request:",s.response||s)}};return e.jsx(b,{className:"justify-content-left",children:e.jsx(o,{xs:12,children:e.jsxs(F,{className:"mb-4",children:[e.jsxs(B,{className:"d-flex justify-content-between align-items-center",children:[e.jsx("strong",{className:"flex-grow-1 text-start",children:"Add Payroll"}),e.jsx(W,{to:"/payroll",className:"btn btn-danger btn-sm",children:"Back"})]}),e.jsx(w,{children:e.jsxs(H,{onSubmit:k,children:[e.jsxs(b,{children:[e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"employeeId",onChange:N,value:a.employeeId,label:"Employee ID"})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"text",name:"employeeName",value:a.employeeName,onChange:c,label:"Employee Name",disabled:!0})})]}),e.jsxs(b,{children:[e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"basicSalary",onChange:c,value:a.basicSalary,label:"Basic Salary",required:!0})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"overtime",onChange:c,value:a.overtime,label:"Overtime"})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"bonus",onChange:c,value:a.bonus,label:"Bonus"})})]}),e.jsxs(b,{children:[e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"hoursWorked",value:a.hoursWorked,label:"Hours Worked",readOnly:!0})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"hourlyRate",onChange:c,value:a.hourlyRate,label:"Hourly Rate"})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"deductions",onChange:c,value:a.deductions,label:"Deductions"})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"number",name:"benefits",onChange:c,value:a.benefits,label:"Benefits"})})]}),e.jsxs(b,{children:[e.jsx(o,{className:"mb-3",children:e.jsxs(f,{name:"paymentMethod",onChange:S,value:r||"",label:"Payment Method",children:[e.jsx("option",{value:"",children:"Select Payment Method"}),e.jsx("option",{value:"Bank Transfer",children:"Bank Transfer"}),e.jsx("option",{value:"E-Wallet",children:"E-Wallet"})]})}),e.jsx(o,{className:"mb-3",children:e.jsx(n,{type:"text",name:"accountNumber",onChange:c,value:a.accountNumber,label:"Account Number"})})]}),e.jsx(b,{className:"align-items-center",children:e.jsx(o,{className:"mb-3 d-flex align-items-center",children:e.jsxs(R,{className:"mb-3",children:[e.jsx($,{id:"basic-addon-net-salary",children:"Net Salary:"}),e.jsx(n,{placeholder:"Net Salary","aria-label":"Net Salary","aria-describedby":"basic-addon-net-salary",value:Math.round(m).toLocaleString(),readOnly:!0})]})})}),e.jsxs(f,{name:"status",onChange:c,value:a.status||"Pending",label:"Status",required:!0,children:[e.jsx("option",{value:"Pending",children:"Pending"}),e.jsx("option",{value:"Processed",children:"Processed"}),e.jsx("option",{value:"Paid",children:"Paid"})]}),e.jsxs("div",{className:"d-flex justify-content-end",children:[e.jsx(g,{type:"submit",color:"primary",className:"me-2",children:"Save"}),e.jsx(g,{type:"button",color:"danger",onClick:C,children:"Clear"})]})]})})]})})})};export{Y as default};
